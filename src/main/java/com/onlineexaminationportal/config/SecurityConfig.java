package com.onlineexaminationportal.config;

import com.onlineexaminationportal.security.CustomUserDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration  //it tells to spring that we are doing some configuration to implement Authorization
@EnableWebSecurity //it helps us to avoid the default configuration like username as user and password as Security password generated by dependency
@EnableGlobalMethodSecurity(prePostEnabled = true) //this will help us to implement Authorization
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private CustomUserDetailsService userDetailsService; //loadUserByUsername

    @Bean // whenever a method has to create an object and that object should be managed by SpringBoot we use @Bean
    PasswordEncoder passwordEncoder(){   //To encode the password in 64 encoding format
        return new BCryptPasswordEncoder();
    }

    @Override
    @Bean //we are creating the bean of authenticationManager and it should be managed by spring boot
    protected AuthenticationManager authenticationManager() throws Exception {
        return super.authenticationManager();
        //we have created the bean of AuthenticationManager to authenticate the username and password for signIn
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //hcd4ah

        http
                .csrf().disable()
                .authorizeRequests()
                .antMatchers(HttpMethod.GET,"/OEP/**").permitAll()
                .antMatchers("/OEP/auth/**").permitAll()
                .antMatchers("/Category/**").permitAll()
                .antMatchers("/Quiz/**").permitAll()
                .antMatchers("/Question/**").permitAll()
                .anyRequest()
                .authenticated()
                .and()
                .httpBasic();
    }
    //after doing this configuration, all the urls anybody can access and form based authentication will be changed to Basic authentication
    //.antMatchers(HttpMethod.GET,"/OEP/**").permitAll() this will make sure all the GetMapping method can be accessed by all
   //.antMatchers("/OEP/auth/**").permitAll() this will make sure SignIn should be permitted to all users


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService)  //userDetailsService has username, password and roles
                .passwordEncoder(passwordEncoder());
        //this method will help us to deal with database
    }


}
